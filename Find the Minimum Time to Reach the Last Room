class Solution {
    public int minTimeToReach(int[][] moveTime) {
        PriorityQueue<int[]> queue = new PriorityQueue<>(Comparator.comparingInt(x -> x[2]));
        queue.offer(new int[] { 0, 0, 0, 1 });

        int[][] visited = new int[moveTime.length][moveTime[0].length];
        visited[0][0] = 0;
        int[][] directions = { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 } };

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int time = current[2];
            int row = current[0];
            int col = current[1];
            int next = current[3];
            int nextNext = next % 2 + 1;

            for (int[] direction : directions) {
                int newRow = row + direction[0];
                int newCol = col + direction[1];
                if (newRow >= 0 && newRow < moveTime.length
                        && newCol >= 0 && newCol < moveTime[0].length
                        && visited[newRow][newCol] == 0) {
                    int newTime = Math.max(time + next, moveTime[newRow][newCol] + next);
                    int[] newEntry = new int[] { newRow, newCol, newTime, nextNext };
                    
                    queue.offer(newEntry);
                    visited[newRow][newCol] = newTime;
                    if (newRow == moveTime.length - 1 && newCol == moveTime[0].length - 1) {
                        return newTime;
                    }
                }

            }

        }

        
        return 0;
    }
}
