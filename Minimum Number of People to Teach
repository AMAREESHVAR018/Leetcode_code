import java.util.*;

class Solution {
    public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
        int m = languages.length; // number of people
        List<Set<Integer>> langSets = new ArrayList<>();
        
        // Convert each person's languages into a Set
        for (int[] langs : languages) {
            Set<Integer> set = new HashSet<>();
            for (int l : langs) set.add(l);
            langSets.add(set);
        }

        // Step 1: Find candidates who cannot communicate with friends
        Set<Integer> candidates = new HashSet<>();
        for (int[] f : friendships) {
            int u = f[0] - 1; // zero-based index
            int v = f[1] - 1;
            if (!canCommunicate(langSets.get(u), langSets.get(v))) {
                candidates.add(u);
                candidates.add(v);
            }
        }

        if (candidates.isEmpty()) return 0; // already fine

        // Step 2: Count how many candidates know each language
        int[] count = new int[n + 1]; // 1-indexed languages
        for (int person : candidates) {
            for (int l : langSets.get(person)) {
                count[l]++;
            }
        }

        int max = 0;
        for (int i = 1; i <= n; i++) {
            max = Math.max(max, count[i]);
        }

        return candidates.size() - max;
    }

    private boolean canCommunicate(Set<Integer> a, Set<Integer> b) {
        for (int l : a) {
            if (b.contains(l)) return true;
        }
        return false;
    }
}
